import React, { useEffect, useState, Fragment } from 'react';
import FeaturedDay from './components/FeaturedDay';
import WeatherDay from './components/WeatherDay';
import Settings from './components/Settings';
import Info from './components/Info';
import Error from './components/Error';
import './App.css';

function App() {
	const [weather, setWeather] = useState([]);
	const [isLoading, setIsLoading] = useState(true);
	const [errors, setErrors] = useState({hasErrors: false, errorMsg: ''});
	const [selectedSol, setSelectedSol] = useState();
	const [isFeatureOpen, setIsFeatureOpen] = useState(true);
	const [arePanelsHidden, setArePanelsHidden] = useState(false);
	const [isCelsius, setIsCelsius] = useState(true);
	const [isKm, setIsKm] = useState(true);
	const [showInfo, setShowInfo] = useState(false);
	const [backgroundState, setBackgroundState] = useState({activeBackground: undefined, numOfBackgrounds: 6});
	const API_key = 'Ep8HhmQJRBhJFnUmnWbYjo6SxaOAfnHPcdG7XH4y';
	const API_url = `https://api.nasa.gov/insight_weather/?api_key=${API_key}&feedtype=json&ver=1.0`;

// Update State functions
	const updateSelectedSol = (selected) => {
		setSelectedSol(selected);
		setIsFeatureOpen(true);
	}
	
	const openForeCast = () => {
		setIsFeatureOpen(prevState => {return !prevState});
	}

	const togglePanels = () => {
		setArePanelsHidden(prevState => {return !prevState});
	}

	const toggleInfo = () => {
		setShowInfo(prevState => {return !prevState});
	}

	const closeModal = (e) => {
		if (e.key) {
			if (e.key === "Escape") {
				setShowInfo(false);
			}
		} else {
			setShowInfo(false);
		}
	}

	const changeTempUnit = () => {
		setIsCelsius(prevState => {return !prevState});
	}

	const changeWindUnit = () => {
		setIsKm(prevState => {return !prevState});
	}

	const changeBg = () => {
		if (backgroundState.activeBackground === backgroundState.numOfBackgrounds) {
			setBackgroundState(prevState => {return {...prevState, activeBackground: 1}});
		} else {
			setBackgroundState(prevState => {return {...prevState, activeBackground: prevState.activeBackground + 1}});
		}
	}


// Hooks
	useEffect(() => {
		const fetchWeather = async () => {
			let response;
			try {
				response = await fetch(API_url);
			} catch (error) {
				setErrors({hasErrors: true, errorMsg: 'A problem occured while trying to retrieve weather data. Please try again later.'})
				console.log(error);
			}
			if (response.ok) {
				try {
					const json = await response.json();
					const {sol_keys, validity_checks, ...solData} = json;
					const filteredData = Object.entries(solData).map(([solKey, data]) => {
						return {
							sol: solKey,
							averageTemp: data.AT.av,
							maxTemp: data.AT.mx,
							minTemp: data.AT.mn,
							windSpeed: data.HWS.av,
							windDirectionDegrees: data.WD.most_common.compass_degrees,
							windDirectionCardinal: data.WD.most_common.compass_point,
							season: data.Season,
							date: new Date(data.First_UTC),
						}
					});
					setWeather(filteredData);
					setSelectedSol(filteredData.length - 1);
				} catch (error) {
					console.log(error);
					setErrors({hasErrors: true, errorMsg: 'Weather data is currently updating. Please try again in a few minutes.'});
				}
			} else {
				setErrors({hasErrors: true, errorMsg: 'Something went wrong trying to retrieve weather data. Please try again later.'});
			}
			setIsLoading(false);
		}
		fetchWeather();
	}, [API_url]);

	useEffect(() => {
		const rnd = Math.floor(Math.random() * backgroundState.numOfBackgrounds) + 1;
		setBackgroundState(prevState => {return {...prevState, activeBackground: rnd}});
	}, [backgroundState.numOfBackgrounds])

	useEffect(() => {
		if (backgroundState.activeBackground) {
			const bgClasses = ['bg1', 'bg2', 'bg3', 'bg4', 'bg5', 'bg6'];
			document.body.classList.remove(...bgClasses);
			document.body.classList.add(`bg${backgroundState.activeBackground}`);
		}
	}, [backgroundState])


// Render related functions
	const displayTemp = (temp) => {
		if (isCelsius) {
			return `${Math.round(temp)} ${String.fromCodePoint(8451)}`;
		} else {
			const tempFahr = (temp * 9 / 5 ) + 32;
			return `${Math.round(tempFahr)} ${String.fromCodePoint(8457)}`;
		}
	}

	const displaySpeed = (speed) => {
		if (isKm) {
			return `${Math.round(speed)} km/h`;
		} else {
			const speedMiles = speed / 0.6213711922;
			return `${Math.round(speedMiles)} mph`;
		}
	}

	return (
		<Fragment>
			{(!isLoading && !errors.hasErrors) && <FeaturedDay weatherData={weather[selectedSol]} isOpen={isFeatureOpen} panelsHidden={arePanelsHidden} displayTemp={displayTemp} displaySpeed={displaySpeed} /> }
			{(!isLoading && !errors.hasErrors) && <section aria-label="Weather previous days" className={`forecast ${isFeatureOpen ? 'cls-inactive' : ''} ${arePanelsHidden ? 'cls-hidden' : ''} `}>
				{weather.map((data, index) => {
					return <WeatherDay key={index} arrIndex={index} solData={data} updateSelectedSol={updateSelectedSol} displayTemp={displayTemp} />
				})}
			</section> }

			{errors.hasErrors && <Error errorMsg={errors.errorMsg} />}
			{isLoading && <svg className="loading" viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg">
   				<path d="M486,256C486,382.174 382.174,486 256,486C129.826,486 26,382.174 26,256C26,129.826 129.826,26 256,26C381.974,26.527 485.473,130.026 486,256Z" fill="rgb(215,90,74)" fillOpacity="0.7" fillRule="nonzero;"/>
    			<path d="M234.16,478.64C233.36,480.68 232.4,482.72 231.4,484.68C138.029,474.631 59.772,408.389 34.44,317.96C54.16,299.68 74.48,282 94.76,264.4C101.04,258.96 107.84,253.28 116.08,252.28C126.64,251.04 136.64,258.08 142.56,266.92C148.48,275.76 151.2,286.24 154.8,296.2C163.437,320.132 177.214,341.884 195.16,359.92C204.16,368.92 214.24,377.04 221.68,387.4C229.732,399.29 235.06,412.813 237.28,427C241.051,444.168 239.971,462.051 234.16,478.64ZM486,256C486.047,339.808 440.256,417.252 366.8,457.6C382.36,436.92 397.04,412.52 400.56,390.6C408.72,340 362.32,286 382.56,249.84C399,220.48 442.72,217.24 482.68,217C484.902,229.881 486.013,242.929 486,256ZM320,321.592C339.529,321.592 355.384,337.447 355.384,356.976C355.384,376.505 339.529,392.36 320,392.36C300.471,392.36 284.616,376.505 284.616,356.976C284.616,337.447 300.471,321.592 320,321.592ZM219.028,249.856C232.274,249.856 243.028,260.61 243.028,273.856C243.028,287.102 232.274,297.856 219.028,297.856C205.782,297.856 195.028,287.102 195.028,273.856C195.028,260.61 205.782,249.856 219.028,249.856ZM320,189.936C333.246,189.936 344,200.69 344,213.936C344,227.182 333.246,237.936 320,237.936C306.754,237.936 296,227.182 296,213.936C296,200.69 306.754,189.936 320,189.936ZM187.916,152.5C201.162,152.5 211.916,163.254 211.916,176.5C211.916,189.746 201.162,200.5 187.916,200.5C174.67,200.5 163.916,189.746 163.916,176.5C163.916,163.254 174.67,152.5 187.916,152.5ZM400,76.68C396.64,78.68 393.32,80.72 390,82.8C367.88,96.72 346.72,112.56 322.04,121.48C284.4,135.08 241.8,131.16 203.84,118.44C172.24,107.84 143.2,91.52 114.8,74.44C198.618,9.249 317.216,10.18 400,76.68Z" fill="rgb(188,79,65)" fillOpacity="0.7" fillRule="nonzero;"/>
    			<g>
        			<path d="M320,244.932C337.006,244.932 351,230.938 351,213.932C351,196.926 337.006,182.932 320,182.932C302.994,182.932 289,196.926 289,213.932C289.02,230.931 303.001,244.912 320,244.932ZM320,196.932C329.326,196.932 337,204.606 337,213.932C337,223.258 329.326,230.932 320,230.932C310.674,230.932 303,223.258 303,213.932C303.011,204.61 310.678,196.943 320,196.932Z" fill="black" fillRule="nonzero"/>
        			<path d="M492.744,246C492.884,249.312 493,252.64 493,256C493.088,342.407 445.845,422.255 370.068,463.776C369.964,463.832 369.864,463.892 369.756,463.94C334.889,483.01 295.779,493.007 256.037,493.007C150.431,493.007 56.97,422.416 28.088,320.836C27.792,320.191 27.596,319.504 27.508,318.8C7.759,247.225 22.875,170.373 68.26,111.608C68.571,110.97 68.975,110.382 69.46,109.864C69.631,109.701 69.812,109.547 70,109.404C81.573,94.754 94.824,81.51 109.48,69.944C110.096,69.211 110.858,68.613 111.716,68.188C197.564,1.986 318.488,2.955 403.264,70.524C404.022,70.922 404.7,71.456 405.264,72.1C416.719,81.421 427.286,91.784 436.828,103.056C437.22,103.366 437.578,103.715 437.896,104.1C438.091,104.355 438.268,104.622 438.428,104.9C464.744,136.579 482.32,174.598 489.404,215.168C489.507,215.542 489.575,215.925 489.608,216.312C491.247,225.924 492.289,235.628 492.728,245.368C492.736,245.504 492.768,245.688 492.768,245.768C492.768,245.848 492.744,245.92 492.744,246ZM474.736,299.6C477.567,285.248 478.989,270.653 478.98,256.024C478.98,255.008 478.904,254.016 478.904,253.008C462.812,254.06 446.316,258.444 442.668,261.436C441.403,262.51 439.797,263.1 438.137,263.1C434.297,263.1 431.137,259.94 431.137,256.1C431.137,253.963 432.116,251.939 433.792,250.612C440.952,244.74 461.408,240.164 478.268,239.044C477.896,234.016 477.376,229.028 476.668,224.096C438.38,224.712 402.128,229.256 388.668,253.296C380.348,268.144 385.592,287.72 392.204,308.144C393.377,311.793 391.346,315.761 387.7,316.944C387.004,317.172 386.276,317.289 385.544,317.288C382.516,317.288 379.815,315.322 378.884,312.44C371.584,289.888 365.384,266.216 376.448,246.44C393.028,216.868 432.528,210.976 474.228,210.128C467.165,176.654 452.464,145.26 431.276,118.4C411.604,132.797 390.985,145.854 369.56,157.484C368.539,158.034 367.398,158.322 366.238,158.322C362.398,158.322 359.238,155.162 359.238,151.322C359.238,148.752 360.653,146.38 362.916,145.16C383.495,133.941 403.328,121.406 422.292,107.632C415.169,99.656 407.485,92.198 399.3,85.316C397.424,86.452 395.556,87.572 393.7,88.732C388.956,91.716 384.248,94.8 379.54,97.88C362.316,109.148 344.508,120.796 324.4,128.064C307.18,134.093 289.044,137.091 270.8,136.924C247.246,136.723 223.879,132.722 201.6,125.076C198.894,124.043 197.096,121.433 197.096,118.536C197.096,114.696 200.256,111.536 204.096,111.536C204.749,111.536 205.4,111.628 206.028,111.808C246.9,125.5 287.228,126.604 319.628,114.9C338.196,108.168 354.548,97.496 371.86,86.168C376.64,83.04 381.416,79.916 386.24,76.88C386.668,76.596 387.096,76.344 387.524,76.08C310.567,19.597 205.429,18.704 127.524,73.872C141.424,82.08 156.992,90.84 172.952,98.36C175.418,99.506 177.003,101.989 177.003,104.709C177.003,108.549 173.843,111.709 170.003,111.709C168.958,111.709 167.927,111.475 166.984,111.024C148.592,102.356 130.84,92.192 115.46,82.992C104.047,92.268 93.571,102.642 84.184,113.964C103.036,129.656 133.676,144.52 134.012,144.68C136.432,145.845 137.977,148.303 137.977,150.988C137.977,154.828 134.816,157.989 130.976,157.989C129.925,157.989 128.887,157.752 127.94,157.296C109.467,148.326 91.941,137.522 75.628,125.048C37.917,176.764 24.345,242.336 38.428,304.772C54.56,290.056 71,275.728 90.16,259.1C96.248,253.828 104.58,246.612 115.224,245.32C129.784,243.612 141.888,253.336 148.364,263.012C153.021,270.635 156.652,278.839 159.164,287.412C159.892,289.552 160.616,291.692 161.384,293.812C169.682,316.778 182.904,337.654 200.12,354.972C202.636,357.488 205.248,359.944 207.864,362.4C215.027,368.724 221.554,375.733 227.352,383.328C236.051,396.027 241.792,410.517 244.152,425.728C247.924,443.233 247.044,461.425 241.6,478.484C246.376,478.792 251.164,479 256,479C293.055,479.013 329.535,469.781 362.124,452.144C380.252,427.812 390.888,406.728 393.656,389.496C394.131,386.047 397.109,383.45 400.591,383.45C404.431,383.45 407.591,386.61 407.591,390.45C407.591,390.873 407.552,391.296 407.476,391.712C404.629,406.356 399.212,420.381 391.476,433.136C434.544,400.249 464.161,352.747 474.736,299.6ZM42.436,320.112C67.799,404.043 140.296,465.625 227.224,477.08C227.36,476.752 227.524,476.4 227.648,476.084C232.872,462.832 233.796,446.748 230.4,428.264C228.397,415.088 223.477,402.524 216,391.492C210.716,384.641 204.78,378.318 198.276,372.612C195.556,370.068 192.84,367.5 190.212,364.868C171.545,346.095 157.209,323.463 148.212,298.564C147.42,296.376 146.664,294.148 145.908,291.916C143.767,284.512 140.683,277.414 136.732,270.796C132.76,264.868 125.204,258.248 116.896,259.232C111.004,259.948 105.46,264.392 99.344,269.692C78.108,288.112 60.24,303.712 42.436,320.112ZM309.952,315.8C306.83,316.564 304.615,319.385 304.615,322.6C304.615,326.44 307.776,329.601 311.616,329.601C312.177,329.601 312.735,329.533 313.28,329.4C315.483,328.863 317.742,328.591 320.009,328.591C335.589,328.591 348.409,341.412 348.409,356.991C348.409,372.571 335.589,385.391 320.009,385.391C304.429,385.391 291.609,372.571 291.609,356.991C291.609,352.723 292.571,348.509 294.424,344.664C294.844,343.748 295.062,342.752 295.062,341.745C295.062,337.905 291.902,334.745 288.062,334.745C285.427,334.745 283.006,336.233 281.816,338.584C279.048,344.326 277.611,350.619 277.611,356.994C277.611,380.254 296.751,399.394 320.011,399.394C343.271,399.394 362.411,380.254 362.411,356.994C362.411,333.734 343.271,314.594 320.011,314.594C316.622,314.594 313.245,315 309.952,315.804L309.952,315.8ZM401.6,337.2C400.694,334.278 397.973,332.273 394.914,332.273C391.074,332.273 387.914,335.432 387.914,339.273C387.914,339.909 388.001,340.543 388.172,341.156C390.04,347.508 391.44,353.124 392.456,358.324C393.096,361.599 395.991,363.984 399.328,363.984C403.169,363.984 406.33,360.823 406.33,356.982C406.33,356.532 406.286,356.082 406.2,355.64C405.088,350 403.6,343.972 401.6,337.2ZM96.14,298.196C92.789,298.767 90.315,301.699 90.315,305.098C90.315,308.939 93.475,312.099 97.316,312.099C97.71,312.099 98.103,312.066 98.492,312C107.68,310.456 116.516,316.726 118.092,325.908C118.697,329.22 121.611,331.649 124.978,331.649C128.818,331.649 131.978,328.489 131.978,324.649C131.978,324.283 131.949,323.918 131.892,323.556C129.025,306.803 112.899,295.365 96.14,298.196ZM197.108,251.936C191.296,257.747 188.028,265.638 188.028,273.857C188.028,290.863 202.022,304.857 219.028,304.857C236.034,304.857 250.028,290.863 250.028,273.857C250.028,265.638 246.76,257.747 240.948,251.936C228.915,239.928 209.141,239.928 197.108,251.936ZM231.052,285.88C227.866,289.064 223.542,290.854 219.038,290.854C209.714,290.854 202.042,283.182 202.042,273.858C202.042,264.534 209.714,256.862 219.038,256.862C223.542,256.862 227.866,258.652 231.052,261.836C237.635,268.436 237.635,279.28 231.052,285.88ZM218.916,176.5C218.916,159.494 204.922,145.5 187.916,145.5C170.91,145.5 156.916,159.494 156.916,176.5C156.916,193.506 170.91,207.5 187.916,207.5C204.915,207.48 218.896,193.499 218.916,176.5ZM111.344,187.264C113.74,188.437 115.266,190.883 115.266,193.551C115.266,197.391 112.106,200.551 108.266,200.551C107.123,200.551 105.998,200.271 104.988,199.736C104.252,199.36 86.82,190.456 74.616,182.324C72.671,181.027 71.5,178.838 71.5,176.5C71.5,172.66 74.66,169.5 78.5,169.5C79.882,169.5 81.234,169.909 82.384,170.676C93.908,178.36 111.168,187.172 111.344,187.264ZM187.916,193.5C178.59,193.5 170.916,185.826 170.916,176.5C170.916,167.174 178.59,159.5 187.916,159.5C197.242,159.5 204.916,167.174 204.916,176.5C204.905,185.822 197.238,193.489 187.916,193.5ZM265.96,96.644C271.029,100.035 276.993,101.845 283.092,101.844C285.155,101.844 287.213,101.64 289.236,101.236C297.302,99.645 304.405,94.889 308.948,88.036C309.752,86.868 310.182,85.484 310.182,84.066C310.182,80.226 307.023,77.066 303.182,77.066C300.807,77.066 298.588,78.276 297.3,80.272C292.126,88.029 281.486,90.156 273.728,84.984C272.578,84.217 271.226,83.808 269.844,83.808C266.004,83.808 262.844,86.968 262.844,90.808C262.844,93.146 264.015,95.335 265.96,96.632L265.96,96.644Z" fill="black" fillRule="nonzero;"/>
    			</g>
			</svg>
			}
			<Info showInfo={showInfo} closeModal={closeModal} />
			
			{!errors.hasErrors &&
			<button aria-label="Toggle betwwen detailed view and past 7 days" className={`toggle-btn ${isFeatureOpen ? "feature-open" : "forecast-open"}`} onClick={openForeCast}>
				<svg viewBox="0 0 448 512" version="1.1" xmlns="http://www.w3.org/2000/svg">
    				<path d="M448,112L448,464C448,490.5 426.5,512 400,512L48,512C21.5,512 0,490.5 0,464L0,112C0,85.5 21.5,64 48,64L96,64L96,12C96,5.4 101.4,0 108,0L148,0C154.6,0 160,5.4 160,12L160,64L288,64L288,12C288,5.4 293.4,0 300,0L340,0C346.6,0 352,5.4 352,12L352,64L400,64C426.5,64 448,85.5 448,112ZM400,458L400,160L48,160L48,458C48,461.3 50.7,464 54,464L394,464C397.3,464 400,461.3 400,458Z"/>
    				<path className="toggle-btn__singleDot" d="M148,288L108,288C101.4,288 96,282.6 96,276L96,236C96,229.4 101.4,224 108,224L148,224C154.6,224 160,229.4 160,236L160,276C160,282.6 154.6,288 148,288Z"/>
   					<path className="toggle-btn__dots" d="M256,372L256,332C256,325.4 250.6,320 244,320L204,320C197.4,320 192,325.4 192,332L192,372C192,378.6 197.4,384 204,384L244,384C250.6,384 256,378.6 256,372ZM160,372L160,332C160,325.4 154.6,320 148,320L108,320C101.4,320 96,325.4 96,332L96,372C96,378.6 101.4,384 108,384L148,384C154.6,384 160,378.6 160,372ZM352,372L352,332C352,325.4 346.6,320 340,320L300,320C293.4,320 288,325.4 288,332L288,372C288,378.6 293.4,384 300,384L340,384C346.6,384 352,378.6 352,372ZM256,276L256,236C256,229.4 250.6,224 244,224L204,224C197.4,224 192,229.4 192,236L192,276C192,282.6 197.4,288 204,288L244,288C250.6,288 256,282.6 256,276ZM352,276L352,236C352,229.4 346.6,224 340,224L300,224C293.4,224 288,229.4 288,236L288,276C288,282.6 293.4,288 300,288L340,288C346.6,288 352,282.6 352,276Z"/>
				</svg>
			</button>} 

			<Settings isCelsius={isCelsius} isKm={isKm} arePanelsHidden={arePanelsHidden} togglePanels={togglePanels} changeTempUnit={changeTempUnit} changeWindUnit={changeWindUnit} changeBg={changeBg} toggleInfo={toggleInfo} showInfo={showInfo} />
		</Fragment>
	);
} 

export default App;
